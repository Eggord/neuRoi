%% Add path
addpath('../../neuRoi')
%% Clear variables
clear all
close all
% Step01 Load experiment configuration from file
rootPaths = load('../../paths/rootPaths.mat');
expName = '2019-09-25-fastZOB';
expFileName = sprintf('experimentConfig_%s.mat',expName);
expFilePath = fullfile(rootPaths.projectDir,'results',expName,expFileName);
foo = load(expFilePath);
myexp = foo.myexp;
disp(myexp.expInfo)
%% Step02 (optional) Sepcify options for opening a trial
myexp.roiDir = myexp.getDefaultDir('roi');

myexp.loadFileType = 'binned';
myexp.trialOptionRaw = struct('process',true,...
                              'noSignalWindow',[1 6],...
                              'intensityOffset',-30);
myexp.trialOptionBinned = struct('process',false,...
                                 'noSignalWindow',[],...
                                 'intensityOffset',-10);

myexp.responseOption = struct('offset',-10,...
                        'fZeroWindow',[10 12],...
                        'responseWindow',[14 20]);
myexp.responseMaxOption = struct('offset',-10,...
                           'fZeroWindow',[10 12],...
                           'slidingWindowSize',5);
myexp.mapsAfterLoading = {'response','responseMax'};
% myexp.mapsAfterLoading = {};

myexp.alignToTemplate = true;
% Step03 Open neuRoi GUI
myexp.planeNum = 4;
mycon = NrController(myexp);
%% Change some parameters if you like
myexp.mapsAfterLoading = {};

%% Add local correlation
mapType = 'localCorrelation';
mapOption = struct('tileSize',16);
trial = myexp.getCurrentTrial();
trial.calculateAndAddNewMap(mapType,mapOption);

%% Copy ROI
trial = myexp.getCurrentTrial();
idx = trial.findRoiByTag(trial.selectedRoiTagArray(1))
roiClipboard = trial.roiArray(idx)

%% Paste ROI
trial = myexp.getCurrentTrial();
trial.addRoi(roiClipboard);

%% Test Marcus's ROI finding GUI
addpath(genpath('../../external_packages/Marcus-two-phton-analysis/'))
%% Open Marcus GUI
trial = myexp.getCurrentTrial();

inputstruct.template = trial.getMapByInd(1).data;
inputstruct.actmap = trial.getMapByInd(3).data;
inputstruct.maxproj = max(inputstruct.template(:)) -  inputstruct.template;% trial.getMapByInd(3).data;trial.getMapByInd(4).data;
inputstruct.ROIs = ROIs;

inputstruct.stack = trial.rawMovie;
findROIs(inputstruct)

%% Remove very small ROIs generated by false clicking
%% Delete point ROIs
%% Delete ROIs with only one point
% Get current trial
trial = myexp.getCurrentTrial();
roiArray = trial.roiArray;
deleteTagArray = {};
for k = 1:length(roiArray)
    roi = roiArray(k);
    if size(roi.position,1)<2
        deleteTagArray{end+1} = roi.tag;
    end
end
% Delete point ROIs
for k=1:length(deleteTagArray)
    tag = deleteTagArray{k};
    trial.deleteRoi(tag);
end
%% Step04 Extract time trace with template ROI in all trials
% Apply template ROI map and correct ROIs in each trial
% If you accidentally closed the GUI, the following code might
% throw an error. In that case, just run Step01, then continue with

myexp.alignToTemplate = true;
myexp.trialOptionRaw = struct('process',true,...
                              'noSignalWindow',[1 6]);

% fileIdx = find(~cellfun(@(x) length(x), strfind(myexp.rawFileList, ...
%                                                   'alignment')));
% roiMapIdx = []
% xx = 1:29;
% roiMapIdx = xx(fileIdx(roiMapIdx));

fileIdx = 1:length(myexp.rawFileList)
% planeNum = 4;
% roiMapIdx = [repmat(1, 1, 8) , 9:12, 12, 14, 14, 16, 16, 18, 18, 20:22, ...
%     repmat(22, 1, 5)];
% planeNum = 2;
% roiMapIdx = [1,1,3,1,repmat(5,1,4),repmat(9,1,3),12:14,14,16:18,repmat(19,1,9)]
% planeNum = 3;
% roiMapIdx = repmat(1,1,27);
planeNum = 1;
roiMapIdx = repmat(7,1,27);

subindex = @(A, r) A{r};
displayRoiFile = @(x) disp(sprintf(['Data: %s' 10 'ROI: %s'],subindex(myexp.rawFileList(fileIdx),x), subindex(myexp.rawFileList(roiMapIdx),x)));

arrayfun(@(x) displayRoiFile(x), 1:length(fileIdx))

planeString = NrModel.getPlaneString(planeNum);

prefix = 'binned_x1y1z2_';
appendix = '_RoiArray';
roiFileNameList = cellfun(@(x) iopath.modifyFileName(x,prefix,appendix,'mat'),myexp.rawFileList(roiMapIdx),'UniformOutput',false);
roiFileList = cellfun(@(x) fullfile(myexp.roiDir,planeString,x), ...
                      roiFileNameList,'UniformOutput',false);

%% Start extracting
plotTrace = true;
myexp.extractTimeTraceBatch(fileIdx, ...
                            roiFileList,planeNum, ...
                            plotTrace);

%% Step05 (Optional) Save a sorted time trace list for further
%% processing by Python
fileNameArray = myexp.rawFileList(fileIdx([1, 3:22, 25:27]));
planeNum = 3;
planeString = NrModel.getPlaneString(planeNum);
traceResultDir = fullfile(myexp.resultDir,'time_trace', ...
                          planeString);

% Sort file names by odor
nTrialPerOdor = 3;
odorList = myexp.expInfo.odorList
[fileNameArraySorted,odorArraySorted] = shortcut.sortFileNameArray(fileNameArray,'odor',odorList);
% Load time trace matrices
traceResultArray = struct('timeTraceMat',{},'roiArray',{},...
                          'roiFilePath',{},'rawFilePath',{});
appendix = sprintf('_frame%dtoInfby4',planeNum);
for k=1:length(fileNameArraySorted)
    fileName = fileNameArraySorted{k};
    timeTraceFilePath = shortcut.getTimeTraceFilePath(traceResultDir,fileName,appendix);
    foo = load(timeTraceFilePath);
    traceResultArray(k) = foo.traceResult;
end

% Keep only the ROIs that appear in all trials
[commonRoiTagArray,timeTraceMatList,idxMat] = ...
    analysis.findCommonRoi(traceResultArray,'removePointRoi', true);

% Save time trace
timeTraceDataFilePath = fullfile(traceResultDir, ...
                           'timetrace.mat');
save(timeTraceDataFilePath,'timeTraceMatList','odorArraySorted','odorList')
